1	РОЗРОБКА UML ДІАГРАМИ РОЗГОРТАННЯ

Для зображення всіх фізичних компонентів системи, була розроблена
діаграма розгортання. Розглянемо кожен компонент окремо.
Серверна частина. Вона відповідає за зв’язок всіх елементів. Серверну частину було розроблено за допомогою платформи .NET. Це дозволило створити швидкий та легко-масштабований серверний додаток. Цей додаток включає в себе програмний код для роботи з базою даних, бізнес-логіку, захист та специфікацію REST Api.
База даних. У якості технології для бази даних було обрано Mongo Db саме через її структуру, яка завдяки документам, чудово впорається з великою кількістю даних. Для зв’язку з серверною частиною використовується MongoDb Driver через свою простоту та швидкість 
Мобільний додаток. Мовою програмування було обрано Flutter через можливість підтримувати багато платформ. Розробка для всіх приладів виконується лише раз. Взаємодія з серверною частиною виконується завдяки REST Api запитам.
IoT-пристрій. Представляє собою геолокатор, що передає дані про поточне місцезнаходження фури. Було обрано Raspberry Pi та мову програмування Python, через підтримку широкого спектру бібліотек, що дозволяє значно розширити можливості. Саме дані з локатора дозволяють в подальшому організовувати логістику автоматично. Взаємодія з серверною частиною через REST Api.
Веб-додаток. Розроблений за допомогою Angular та мови програмування TypeScrypt. Саме ці технології було обрано через використання компонентів Angular, що дозволяє створити додаток більш стабільним там швидким. Взаємодія з сервером – через REST Api запити. 


2	РОЗРОБКА UML ДІАГРАМИ ПРЕЦЕДЕНТІВ

UML-діаграма прецедентів є інструментом моделювання, який використовується для візуалізації функціональності системи з точки зору користувача. UML-діаграму прецедентів зображено на рисунку 2.
Головний актор – користувач. Він може реєструватись та входити в систему. Також йому доступний перегляд статистики про компанію. Серед головних можливостей користувача – управління фурами та управління замовленнями. Для фур додавання фур, видалення та вибір найближчого замовлення, а також перегляд, створення, початок та завершення для замовлень дозволяє в повному обсязі використовувати систему.
Адміністратор має всі ті ж можливості, що й звичайний користувач, але додатково має можливість керувати користувачами, що дозволяє мати контроль над всіма елементами системи.
IoT-пристрій тільки оновлює дані в базі даних, а саме поточне місце фури. Це дозволяє забезпечити автоматизацію логістики. 

 
3	РОЗРОБКА ER ДІАГРАМИ

ER-діаграма є важливим інструментом при проєктуванні баз даних. Вона надає можливість зрозуміти структуру даних та взаємозв'язки між різними об'єктами.ER діаграма складається з шести компонентів, на базі яких було розроблено базу даних. 
Ці компоненти включають у себе:
а)	Користувачі.  Цей компонент представляє користувачів системи, він містить основні атрибути, такі як ім'я, електронна пошта, роль (user/admin), які визначають користувачів. Користувачі використовують систему для додавання книг до своєї полиці, оцінки книг, перегляду списку книг тощо.
б)	Автентифікаційний токен. Цей компонент відповідає за токени автентифікації, які використовуються для авторизації користувачів у системі. 
в)	Фура. Цей компонент представляє фуру компанії та відповідає за її інформацію та функціонал.
г)	Замовлення. Цей компонент містить інформацію про замовлення компанії та його характеристики.
д)	Компанія. Цей компонент відповідає за інформацію про компанію. 
е)	Ролі. Цей компонент представляє всі наявні ролі в системі (користувач, адміністратор і т.д.).
Завдяки гнучкості MongoDB, яка надає можливість зберігати зв’язані дані в колекції і використовувати вкладені об’єкти для представлення зв’язків між даними, працювати з даними можна набагато швидше. 


4	РОЗРОБКА UML ДІАГРАМИ ДІЯЛЬНОСТІ

Ця діаграма дозволяє детально зрозуміти, яким чином виконується певний процес. Це дозволяє повністю зрозуміти його роботи.
На рисунку 4 зображено діаграму діяльності для IoT-пристрою. Отже, спочатку пристрій отримує поточні координати, потім відправляє на серверну частину, де в свою чергу дані в базі оновлюються. Весь процес забезпечений валідацією та захистом від неправильного виконання.


5.	СТРУКТУРА ПРОЄКТУ ТА ПРИЙНЯТІ ІНЖЕНЕРНІ РІШЕННЯ

Для того, щоб система була надійна та стабільна, було застосовано багато практик та інженерних рішень.
Архітектура серверної частини. У якості архітектури було обрано цибулеву або клин архітектуру. Перш за все, вона забезпечує безпека та стабільність, через те, що найвищі та найнижчі рівні на взаємодіють між собою. У якості системи авторизації та аутентифікації було обрано JWT tokens технологію. Їй була надана перевага, а також зберігання токену оновлення в базі даних, через можливість користувача користуватись як веб-додатком так і мобільним пристроєм. Таким чином користувачеві не потрібно кожного разу виконувати вхід наново. Серед правил програмування було використано принципи ООП, SOLID та DRY. Таким чином код значно зрозуміліший та простий. Також використовувались коментарі в місцях, де вони потрібні.
В додатку також реалізована система власних помилок, які викликаються у тій чи іншій ситуації. Це дозволяє вільно керувати потоком виконання. В таблиці представлено специфікацію REST API для взаэмодії з серверним додатком.

Таблиця 1 – Специфікація REST API основного серверного додатку
Сутність	Метод	Посилання	Опис дії
Користувачі	GET	/users	Отримання сторінки користувачів
	POST	/users/register	Реєстрація користувача у системи
		/users/login	Вхід користувача у систему
		/users/refresh	Оновлення токену доступу
		/users/{userId}/roles/{roleName}	Додавання ролі користувачу
	PUT	/users	Оновлення даних користувача
	DELETE	/users/{userId}/roles/{roleName}	Видалення ролі користувача
		/users/{userId}	Видалення користувача
Фури	GET	/trucks	Отримання сторінки фур
		/trucks/{truckId}	Отримання фури
		/trucks/takeOrder	Вибір найближчого замовлення
	POST	/trucks/create	Додавання фури
		/trucks/refresh	Оновлення позиції фури
	PUT	/trucks	Оновлення інформаціх про фуру
	DELETE	/trucks/{truckId}	Видалення фури
Замовлення	POST	/orders/create	Створення замовлення
		/orders/start	Початок замовлення
		/orders/end	Закінчення замовлення
	GET	/orders	Отримати сторінку замовлень
		/orders/{orderId}	Отримати 1 замовлення
Компанії	GET	/companies	Отримати сторінку компаній
		/companies/{companyId}	Отримати 1 компанію
		/companies/statistics	Отримати статистику по компанії
Експорт даних	GET	/export	Отримати резервну копію даних в csv файлі
